namespace 'Bot';


/* Assumptions */
Assumption "Bot.BatteryStatus"  MIN_PERIOD:  1 seconds;
Assumption "Bot.Odometry" MIN_PERIOD: 0.5 seconds;

/* Default Values */
Default "Bot.BatteryStatus" off;
Default "Bot.Odometry" keep;

/* Preplanned Rules */
Rule PREPLANNED "Rule 1" applies forall // a preplanned rule with the name "Rule 1" used for all turtlebots
	Trigger Context["Bot.active"] ENTRY // it is triggered as soon as the state "active" is activated
    	Monitor "Bot.Diagnostics":
    		CHANGE_PERIOD: every 3 seconds  // once every three seconds,
    		CHANGE_SCOPE: scope local      //the Diagnostics data should be locally monitored
    	Monitor "Bot.Odometry":
    		CHANGE_PERIOD: every 2 seconds  // once every two seconds,
    		CHANGE_SCOPE: scope central    //the TurtleBots odometry data should be 
;    		                               //reported centrally to the control station

Rule PREPLANNED "While moving to target"  applies forall
	Trigger Context["Bot.travelling-to-target-location"] ENTRY // when a bot enters the state "travelling-to-target-location"...
    	Monitor "Bot.BatteryStatus":
    		CHANGE_PERIOD: every 1 seconds  
    		CHANGE_SCOPE: scope central //... the Battery Status should be centrally monitored once every second
;    



/* UbiquitousRules
 */
Rule UBIQUITOUS "Battery_State_Warning" applies forall //The rule holds for all turtlebots
	salience 1 	//The rule has priority/salience 1. 
	           //If multiple ubiquitous rules can be applied, the one with the highest salience is selected
	Trigger Event['Bot.low-battery'] and Event['Bot.sensor-failure']  //When the event low-battery as well as the event sensor-failure occurs.
		Monitor "Bot.Odometry":
			CHANGE_SCOPE: scope local
			CHANGE_PERIOD: every 5 seconds //The Odometry Data should be locally monitored once every 5 seconds.
		Monitor "Bot.BatteryStatus":
			CHANGE_SCOPE: scope central
			CHANGE_PERIOD: every 2 seconds //The Battery Status should be centrally monitored once every 2 seconds second.
;


