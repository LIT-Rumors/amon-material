grammar net.mv.monitoring.Dsl with org.eclipse.xtext.common.Terminals


generate dsl "http://www.scp.lit.jku.at/amon/Dsl"

Model:
	namespace=Namespace contracts+=Assumption* defaults+=DefaultValues* prules+=StateRule*  grules+=GlobalRule* constraints+=ConstraintRule*;

Namespace:
	'namespace' namespace=STRING ;


Assumption:
	'assumption' name=STRING frequency=MinPeriod  ;

DefaultValues:
	'default' name=STRING value=State ;

State:
	state=(OFF|KEEP);



MinPeriod:
	'min_period:' frequency=DOUBLE 'seconds';

ConstraintRule:
	'constraint' name=STRING scope=Scope  'requiresmonitor' monitors+=STRING* ;

Applicability:
	'applies' trigger=(ApplicationID | ApplicationGlobal | ApplicationGroup);

ApplicationID:
	'for' 'device' '[' event=STRING ']';

ApplicationGroup:
	'for' 'group' '(' group=STRING ')'; 

ApplicationGlobal:
	sc='forall';

Scope:
	scope=('local' | 'central');

StateRule:
	'rule' 'STATE_SPECIFIC' name=STRING applicability=Applicability  trigger=Trigger monitors+=Monitor* ;
	
GlobalRule:
	'rule' 'GLOBAL' name=STRING applicability=Applicability ('salience' salience=INT)?  trigger=Trigger monitors+=Monitor* ;
	

Trigger:
	'trigger' trigger=(Event | Context | Data);

Context:
	'context' '[' context=STRING ']' status?=Status?;

Status:
	'ENTRY' | 'EXIT';

Event:
	'event' '[' event=STRING ']' ('and' 'event' '[' ontop+=STRING ']')* ;

Data:
	'data' '[' value=STRING 'when' condition=ValueCondition ']';

//Type:
//	'type' type=('PREPLANNED' | 'REACTIVE');

Monitor:
	'monitor' name=STRING ':' changes+=ChangeType*;

ChangeType:
	ChangeFrequency | ChangeState | ChangeScope | ChangeReportingFrequency;

ChangeScope:
	'scope:' scope=Scope;

ChangeState:
	'state:' scope=(ON | OFF);

ChangeFrequency:
	'period:' 'every' frequency=DOUBLE 'seconds';

ChangeReportingFrequency:
	'reporting_period:' 'every' frequency=DOUBLE 'seconds';

DOUBLE:
	INT ('.' INT)?;

//
ValueCondition:
	value1=DataItem operator=RelationalOperator value2=DataItem;

DataItem:
	dataKey=DataKey | value=DataValue;

DataKey:
	jsonPath=STRING;

DataValue:
	double=DOUBLE | string=STRING;

RelationalOperator:
	GT | GE | LT | LE | NE | EQUALEQUAL; // | WITHIN;

terminal ON:
	'on';
	
terminal KEEP:
	'keep';

terminal OFF:
	'off';

terminal EQUALSIGN:
	'=';

terminal EQUALEQUAL:
	'==';

terminal GT:
	'>';

terminal GE:
	'>=';

terminal LT:
	'<';

terminal LE:
	'<=';

terminal NE:
	'!=';

NOT:
	'!';

OPT:
	'?';
